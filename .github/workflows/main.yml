# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches: [production, staging]
  workflow_dispatch:

jobs:
  pytest:
    name: Check Flake8 and Pytest
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        cd random_forest
        pytest
        cd ../log_reg
        pytest
  push_to_registry:
    needs: pytest

    name: Push to Docker Hub
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout 
        uses: actions/checkout@v3 
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER}}
          password: ${{ secrets.DOCKER_PASSWORD}}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build and push random forest
        uses: docker/build-push-action@v2
        with:
          context: ./random_forest
          file: ./random_forest/Dockerfile
          push: true
          tags: ${{secrets.DOCKER_USER}}/titanic_rf:${{ github.ref_name}}
      -
        name: Build and push log reg
        uses: docker/build-push-action@v2
        with:
          context: ./log_reg
          file: ./log_reg/Dockerfile
          push: true
          tags: ${{secrets.DOCKER_USER}}/titanic_lr:${{ github.ref_name}}

  send_compose:
    needs: push_to_registry
    name: Send docker-compose
    runs-on: ubuntu-latest
    environment: ${{github.ref_name}}
    steps:
    - uses: actions/checkout@master
    - name: copy file via ssh password
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.AWS_HOST}}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_KEY }}
        source: "docker-compose-${{github.ref_name}}.yml"
        target: "titanic/"

  deployment:
    name: Run docker compose
    needs: send_compose
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name}}
    steps:
      - name: deploy docker to docker hub
        run: docker login 
      - name: executing ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST}}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            cd titanic
            sudo docker-compose -f docker-compose-${{ github.ref_name}}.yml down
            sudo docker-compose -f docker-compose-${{ github.ref_name}}.yml build
            sudo docker-compose -f docker-compose-${{ github.ref_name}}.yml up -d --remove-orphans